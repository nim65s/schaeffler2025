class DifferentialActionModelBicopter(crocoddyl.DifferentialActionModelAbstract):
    def __init__(self):
        """
        Init on top of the DAM class.
        Mostly set up the hyperparameters of this model (mass, length, cost, etc).
        """
        crocoddyl.DifferentialActionModelAbstract.__init__(
            self, crocoddyl.StateVector(6), nu=2, nr=12, ng=2
        )
        self.unone = np.zeros(self.nu)

        self.span = 0.2
        self.mass = 2.0
        self.g = 10
        self.inertia = self.mass * self.span**2

        self.costWeights = [
            0.1,  # x
            0.1,  # z
            0.10,  # s
            0.10,  # c
            0.001,  # vx
            0.001,  # vz
            0.001,  # w
            0.0,  # fr
            0.0,  # fl
            0.001,
            0.001,
            0.001,  # a
        ]  # sin, 1-cos, x, xdot, thdot, f

    def calc(self, data, x, u=None):
        if u is None:
            u = self.unone
        # Getting the state and control variables
        x1, x2, th, v1, v2, w = x
        fr, fl = u

        # Shortname for system parameters
        mass, span, g, inertia = self.mass, self.span, self.g, self.inertia
        s, c = np.sin(th), np.cos(th)

        # Defining the equation of motions
        # Force (fx,fz,tauy) in local frame
        loc_f = np.array([0, fr + fl, (fl - fr) * span])
        # Acceleration (x,z,th) in world frame
        data.xout = np.array(
            [-loc_f[1] * s / mass, loc_f[1] * c / mass - g, loc_f[2] / inertia]
        )

        # Computing the cost residual and value
        data.r = self.costWeights * np.array(
            [
                x1,
                x2,
                s,
                1 - c,
                v1,
                v2,
                w,
                fr,
                fl,
                data.xout[0],
                data.xout[1],
                data.xout[2],
            ]
        )
        data.cost = 0.5 * sum(data.r**2)

        data.g = np.array([u[0], u[1]])

    def calcDiff(self, data, x, u=None):
        # Advance user might implement the derivatives. Here
        # we will rely on finite differences.
        pass
